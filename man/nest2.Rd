% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nest2.R
\name{nest2}
\alias{nest2}
\title{Performs the same operation as \code{\link[tidyr:nest]{tidyr::nest()}}, but
allows for preexisting list-columns to be used to index rows. This allows
or creating multiple nested columns (which are list-columns).}
\usage{
nest2(data, ..., .key = "data")
}
\arguments{
\item{data}{A data frame.}

\item{...}{A selection of columns. If empty, all variables are selected. You
can supply bare variable names, select all variables between x and z with
`x:z`, exclude y with `-y`. For more options, see the
\code{\link[dplyr:select]{dplyr::select()}} documentation. See also the
section on selection rules for \code{\link[tidyr:nest]{tidyr::nest()}}.}

\item{.key}{The name of the new column, as a string or symbol.}
}
\description{
See \code{\link[tidyr:nest]{tidyr::nest()}} for additional documentation
}
\examples{
#Nest a column with a list column already present

library(tidyr)
library(dplyr)
library(tibble)

as_tibble(iris) \%>\%
 rowid_to_column("rowid") \%>\%
 nest2(starts_with("Sepal"), .key = "Sepal") \%>\%
 nest2(starts_with("Petal"), .key = "Petal")

#This does not work with tidyr::nest()

\dontrun{

as_tibble(iris) \%>\%
 rowid_to_column("rowid") \%>\%
 nest(starts_with("Sepal"), .key = "Sepal") \%>\%
 nest(starts_with("Petal"), .key = "Petal")
}
}
